name: C++ Compile

on:
  push:
  workflow_dispatch:

jobs:
  cpp_build:
    name: C++ Code Build
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-20.04'
          - 'windows-2019'
          - 'macos-12'
#          - 'ubuntu-latest'
#          - 'windows-latest'
#          - 'macos-latest'
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'

    steps:
      - name: Get system version for Linux
        if: ${{ contains(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          echo "OS_NAME=Linux" >> $GITHUB_ENV
          echo "IS_WIN=" >> $GITHUB_ENV
          echo "IS_MAC=" >> $GITHUB_ENV
      - name: Get system version for Windows
        if: ${{ contains(matrix.os, 'windows') }}
        shell: bash
        run: |
          echo "OS_NAME=Windows" >> $GITHUB_ENV
          echo "IS_WIN=1" >> $GITHUB_ENV
          echo "IS_MAC=" >> $GITHUB_ENV
      - name: Get system version for MacOS
        if: ${{ contains(matrix.os, 'macos') }}
        shell: bash
        run: |
          echo "OS_NAME=MacOS" >> $GITHUB_ENV
          echo "IS_WIN=" >> $GITHUB_ENV
          echo "IS_MAC=1" >> $GITHUB_ENV
      - name: Set environment for Cpython
        if: ${{ !contains(matrix.python-version, 'pypy') }}
        shell: bash
        run: |
          echo "IS_PYPY=" >> $GITHUB_ENV
      - name: Set environment for PyPy
        if: ${{ contains(matrix.python-version, 'pypy') }}
        shell: bash
        run: |
          echo "IS_PYPY=1" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 20
          submodules: 'recursive'
      - name: Set up system dependencies on Linux
        if: ${{ env.OS_NAME == 'Linux' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y tree cloc wget curl make zip
          sudo apt-get install -y git ninja-build make gcc g++
      - name: Set up system dependencies on Windows
        if: ${{ env.OS_NAME == 'Windows' }}
        shell: bash
        run: |
          choco install tree cloc wget curl make zip
          choco install ninja make mingw
      - name: Set up system dependencies on MacOS
        if: ${{ env.OS_NAME == 'MacOS' }}
        run: |
          brew install tree cloc wget curl make zip
          brew install git ninja make gcc
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up pybind11
        shell: bash
        run: |
          pip install "pybind11[global]"
          pip install -U cmake
      - name: Test the basic environment
        shell: bash
        run: |
          pip install -U hfutils
          python -V
          cmake --version
          gcc --version
          tree .
      - name: Build The Binaries
        shell: bash
        run: |
          CTEST_CFG=Release make bin
          tree bin_install
      - name: Prepare Python Env
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install -r requirements-build.txt
      - name: Build And Test Wheels
        shell: bash
        run: |
          make build
          ls -al $(find pyuutils -type f)
          make clean_x
          make unittest
      - name: Pack Wheels
        shell: bash
        run: |
          CTEST_CFG=Release make bin
          make build package
          ls -al dist
          
